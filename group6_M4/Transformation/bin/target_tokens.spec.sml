(*#line 31.10 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)functor Target_LexFn(val getNextTokenPos : string -> {line: word, column: word})(*#line 1.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)(* ============================================================================================== *) 
datatype lexresult	= SHELL of string * string * {line: word, column: word};
val error 			= fn x => TextIO.output(TextIO.stdOut,x ^ "\n")
val eof 			= fn () => SHELL("","eof",getNextTokenPos(""))
(* ============================================================================================== *)
(* ------------------------------------------------------------------ *)
(* assumes that ">" does not occur as part of a nonterminal symbol *)
fun generateSchemaTokenName( yytext ) =
    let
		fun split(x, []   ) =  raise General.Fail("an_error")
		  | split(x, y::ys) = if x=y then ys else split(x,ys);
													
		fun splitFirst(symbol,[])    = 	[] (* symbol was not in the input list *)
		  | splitFirst(symbol,x::xs) = 	if x = symbol 
						then (* found split point *)
							[]
						else (* keep looking      *)
							x::splitFirst(symbol,xs);
																		
        val s0   = explode(yytext);
        val s1   = split(#"<",s0);
        val s2   = splitFirst(#">",s1);  
    in
        implode(explode("!#schema_variable_") @ s2)        
    end;
	
(* ------------------------------------------------------------------ *)

(* ============================================================================================== *)
(*#line 35.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\003\003\003\003\003\003\003\003\003\081\082\003\003\003\003\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\
\\081\079\003\003\003\078\003\003\077\076\075\073\003\071\003\069\
\\068\066\066\066\066\066\066\066\066\066\003\065\060\058\057\003\
\\003\054\008\008\008\008\049\008\008\008\008\008\008\008\008\047\
\\008\008\008\008\043\008\008\008\008\008\008\040\003\003\039\003\
\\003\008\035\008\008\031\028\008\008\024\008\008\008\008\008\008\
\\019\008\008\008\015\008\008\010\008\008\008\007\006\005\004\003\
\\003"
),
 (8, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (10, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\011\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\012\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\013\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\014\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\016\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\017\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\018\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\020\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\021\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\022\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\023\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\027\009\009\009\009\009\009\009\025\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\026\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\029\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\030\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\032\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\033\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\034\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\036\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\037\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (37, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\038\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (40, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\041\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\044\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\045\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (45, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\046\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\048\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (49, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\050\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\051\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (51, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\052\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\053\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\055\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (55, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\056\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\009\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (58, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (60, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\061\061\061\061\061\061\061\061\061\061\061\061\061\061\061\
\\061\061\061\061\061\061\061\061\061\061\061\000\000\000\000\000\
\\000\061\061\061\061\061\061\061\061\061\061\061\061\061\061\061\
\\061\061\061\061\061\061\061\061\061\061\061\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\061\061\061\061\061\061\061\061\061\061\000\000\000\000\062\000\
\\000\061\061\061\061\061\061\061\061\061\061\061\061\061\061\061\
\\061\061\061\061\061\061\061\061\061\061\061\000\000\000\000\061\
\\000\061\061\061\061\061\061\061\061\061\061\061\061\061\061\061\
\\061\061\061\061\061\061\061\061\061\061\061\000\000\000\000\000\
\\000"
),
 (62, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\063\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (63, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\064\064\064\064\064\064\064\064\064\064\000\000\000\000\000\000\
\\000\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\000\000\000\000\064\
\\000\064\064\064\064\064\064\064\064\064\064\064\064\064\064\064\
\\064\064\064\064\064\064\064\064\064\064\064\000\000\000\000\000\
\\000"
),
 (66, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\067\067\067\067\067\067\067\067\067\067\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (69, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\070\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (70, 
"\070\070\070\070\070\070\070\070\070\070\000\070\070\070\070\070\
\\070\070\070\070\070\070\070\070\070\070\070\070\070\070\070\070\
\\070\070\070\070\070\070\070\070\070\070\070\070\070\070\070\070\
\\070\070\070\070\070\070\070\070\070\070\070\070\070\070\070\070\
\\070\070\070\070\070\070\070\070\070\070\070\070\070\070\070\070\
\\070\070\070\070\070\070\070\070\070\070\070\070\070\070\070\070\
\\070\070\070\070\070\070\070\070\070\070\070\070\070\070\070\070\
\\070\070\070\070\070\070\070\070\070\070\070\070\070\070\070\070\
\\070"
),
 (71, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\072\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (73, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\074\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (79, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\080\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (81, 
"\000\000\000\000\000\000\000\000\000\082\082\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\082\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [(N 129)], trans = 0},
{fin = [(N 21),(N 129)], trans = 0},
{fin = [(N 99),(N 129)], trans = 0},
{fin = [(N 91),(N 129)], trans = 0},
{fin = [(N 97),(N 129)], trans = 0},
{fin = [(N 108),(N 129)], trans = 8},
{fin = [(N 108)], trans = 8},
{fin = [(N 108),(N 129)], trans = 10},
{fin = [(N 108)], trans = 11},
{fin = [(N 108)], trans = 12},
{fin = [(N 108)], trans = 13},
{fin = [(N 60),(N 108)], trans = 8},
{fin = [(N 108),(N 129)], trans = 15},
{fin = [(N 108)], trans = 16},
{fin = [(N 108)], trans = 17},
{fin = [(N 49),(N 108)], trans = 8},
{fin = [(N 108),(N 129)], trans = 19},
{fin = [(N 108)], trans = 20},
{fin = [(N 108)], trans = 21},
{fin = [(N 108)], trans = 22},
{fin = [(N 70),(N 108)], trans = 8},
{fin = [(N 108),(N 129)], trans = 24},
{fin = [(N 108)], trans = 25},
{fin = [(N 25),(N 108)], trans = 8},
{fin = [(N 44),(N 108)], trans = 8},
{fin = [(N 108),(N 129)], trans = 28},
{fin = [(N 108)], trans = 29},
{fin = [(N 64),(N 108)], trans = 8},
{fin = [(N 108),(N 129)], trans = 31},
{fin = [(N 108)], trans = 32},
{fin = [(N 108)], trans = 33},
{fin = [(N 54),(N 108)], trans = 8},
{fin = [(N 108),(N 129)], trans = 35},
{fin = [(N 108)], trans = 36},
{fin = [(N 108)], trans = 37},
{fin = [(N 30),(N 108)], trans = 8},
{fin = [(N 11),(N 129)], trans = 0},
{fin = [(N 129)], trans = 40},
{fin = [], trans = 41},
{fin = [(N 127)], trans = 0},
{fin = [(N 108),(N 129)], trans = 43},
{fin = [(N 108)], trans = 44},
{fin = [(N 108)], trans = 45},
{fin = [(N 35),(N 108)], trans = 8},
{fin = [(N 108),(N 129)], trans = 47},
{fin = [(N 89),(N 108)], trans = 8},
{fin = [(N 108),(N 129)], trans = 49},
{fin = [(N 108)], trans = 50},
{fin = [(N 108)], trans = 51},
{fin = [(N 108)], trans = 52},
{fin = [(N 41),(N 108)], trans = 8},
{fin = [(N 108),(N 129)], trans = 54},
{fin = [(N 108)], trans = 55},
{fin = [(N 86),(N 108)], trans = 8},
{fin = [(N 74),(N 129)], trans = 0},
{fin = [(N 76),(N 129)], trans = 58},
{fin = [(N 79)], trans = 0},
{fin = [(N 72),(N 129)], trans = 60},
{fin = [], trans = 61},
{fin = [], trans = 62},
{fin = [], trans = 63},
{fin = [(N 123)], trans = 63},
{fin = [(N 101),(N 129)], trans = 0},
{fin = [(N 105),(N 129)], trans = 66},
{fin = [(N 105)], trans = 66},
{fin = [(N 105),(N 129)], trans = 0},
{fin = [(N 7),(N 129)], trans = 69},
{fin = [(N 115)], trans = 70},
{fin = [(N 3),(N 129)], trans = 71},
{fin = [(N 17)], trans = 0},
{fin = [(N 1),(N 129)], trans = 73},
{fin = [(N 14)], trans = 0},
{fin = [(N 5),(N 129)], trans = 0},
{fin = [(N 95),(N 129)], trans = 0},
{fin = [(N 93),(N 129)], trans = 0},
{fin = [(N 9),(N 129)], trans = 0},
{fin = [(N 19),(N 129)], trans = 79},
{fin = [(N 82)], trans = 0},
{fin = [(N 111),(N 129)], trans = 81},
{fin = [(N 111)], trans = 81}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  1 => let val yytext=yymktext() in (*#line 50.9 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 707.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 101 => let val yytext=yymktext() in (*#line 95.9 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 709.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 105 => let val yytext=yymktext() in (*#line 97.15 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL("integer", yytext, getNextTokenPos(yytext))(*#line 711.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 108 => let val yytext=yymktext() in (*#line 98.18 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL("id", yytext, getNextTokenPos(yytext))(*#line 713.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 11 => let val yytext=yymktext() in (*#line 57.9 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 715.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 111 => let val yytext=yymktext() in (*#line 100.11 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*) getNextTokenPos(yytext); lex()  (*#line 717.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 115 => let val yytext=yymktext() in (*#line 101.15 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*) getNextTokenPos(yytext); lex()  (*#line 719.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 123 => let val yytext=yymktext() in (*#line 103.17 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(generateSchemaTokenName(yytext), yytext, getNextTokenPos(yytext))    (*#line 721.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 127 => let val yytext=yymktext() in (*#line 104.11 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("" , yytext, getNextTokenPos(yytext))    (*#line 723.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 129 => let val yytext=yymktext() in (*#line 106.8 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*) error("ignored an unprintable character: " ^ yytext); getNextTokenPos(yytext); lex()  (*#line 725.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 14 => let val yytext=yymktext() in (*#line 59.10 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 727.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 17 => let val yytext=yymktext() in (*#line 60.10 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 729.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 19 => let val yytext=yymktext() in (*#line 62.9 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 731.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 21 => let val yytext=yymktext() in (*#line 63.9 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 733.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 25 => let val yytext=yymktext() in (*#line 65.11 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 735.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 3 => let val yytext=yymktext() in (*#line 51.9 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 737.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 30 => let val yytext=yymktext() in (*#line 66.12 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 739.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 35 => let val yytext=yymktext() in (*#line 68.12 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 741.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 41 => let val yytext=yymktext() in (*#line 69.13 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 743.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 44 => let val yytext=yymktext() in (*#line 71.10 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 745.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 49 => let val yytext=yymktext() in (*#line 72.12 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 747.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 5 => let val yytext=yymktext() in (*#line 53.9 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 749.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 54 => let val yytext=yymktext() in (*#line 73.12 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 751.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 60 => let val yytext=yymktext() in (*#line 75.13 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 753.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 64 => let val yytext=yymktext() in (*#line 76.11 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 755.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 7 => let val yytext=yymktext() in (*#line 54.9 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 757.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 70 => let val yytext=yymktext() in (*#line 77.13 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 759.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 72 => let val yytext=yymktext() in (*#line 79.9 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 761.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 74 => let val yytext=yymktext() in (*#line 80.9 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 763.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 76 => let val yytext=yymktext() in (*#line 82.9 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 765.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 79 => let val yytext=yymktext() in (*#line 83.10 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 767.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 82 => let val yytext=yymktext() in (*#line 84.10 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 769.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 86 => let val yytext=yymktext() in (*#line 86.11 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 771.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 89 => let val yytext=yymktext() in (*#line 87.10 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 773.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 9 => let val yytext=yymktext() in (*#line 55.9 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 775.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 91 => let val yytext=yymktext() in (*#line 89.9 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 777.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 93 => let val yytext=yymktext() in (*#line 90.9 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 779.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 95 => let val yytext=yymktext() in (*#line 91.9 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 781.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 97 => let val yytext=yymktext() in (*#line 92.9 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 783.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 99 => let val yytext=yymktext() in (*#line 93.9 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec"*)SHELL(yytext, yytext, getNextTokenPos(yytext))(*#line 785.1 "C:\Users\DynamoDoughnut\Desktop\prog_language\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
